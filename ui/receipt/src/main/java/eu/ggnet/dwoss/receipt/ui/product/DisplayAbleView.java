/*
 * Copyright (C) 2014 GG-Net GmbH - Oliver GÃ¼nther
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package eu.ggnet.dwoss.receipt.ui.product;

import java.awt.BorderLayout;
import java.util.Objects;

import eu.ggnet.dwoss.core.common.values.ProductGroup;
import eu.ggnet.dwoss.receipt.ee.ProductProcessor.SpecAndModel;
import eu.ggnet.dwoss.spec.ee.entity.DisplayAbleDesktop;

public class DisplayAbleView extends AbstractView {

    private final DesktopView desktopView;

    private final DisplayPanel displayView;

    public DisplayAbleView(ProductGroup group) {
        this.desktopView = new DesktopView(group);
        this.displayView = new DisplayPanel();
        initComponents();
        desktopView.getDisplayViewPanel().add(displayView, BorderLayout.CENTER);
        desktopPlace.add(desktopView, BorderLayout.CENTER);
        desktopPlace.setPreferredSize(desktopView.getPreferredSize());
    }

    @Override
    public void accept(SpecAndModel sam) {
        DisplayAbleDesktop dad = (DisplayAbleDesktop)Objects.requireNonNull(sam, "sam must not be null").spec();
        desktopView.accept(sam);
        displayView.setDisplay(dad.getDisplay());
    }

    @Override
    public SpecAndModel getResult() {
        SpecAndModel sam = desktopView.getResult();
        DisplayAbleDesktop displayAbleDesktop = (DisplayAbleDesktop)sam.spec();
        displayAbleDesktop.setDisplay(displayView.getDisplay());
        return new SpecAndModel(displayAbleDesktop, sam.model(), sam.gtin());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        desktopPlace = new javax.swing.JPanel();

        desktopPlace.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        desktopPlace.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktopPlace, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktopPlace, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel desktopPlace;
    // End of variables declaration//GEN-END:variables

}
