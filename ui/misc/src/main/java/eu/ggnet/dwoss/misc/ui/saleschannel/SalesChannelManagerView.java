/*
 * Copyright (C) 2018 GG-Net GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package eu.ggnet.dwoss.misc.ui.saleschannel;

import java.util.List;
import java.util.Map;
import java.util.function.Consumer;
import java.util.stream.Collectors;

import javax.swing.ListSelectionModel;

import eu.ggnet.dwoss.core.common.values.SalesChannel;
import eu.ggnet.dwoss.stock.ee.entity.Stock;
import eu.ggnet.dwoss.stock.ee.model.SalesChannelLine;
import eu.ggnet.saft.core.Ui;
import eu.ggnet.saft.core.ui.ResultProducer;
import eu.ggnet.saft.core.ui.Title;

/**
 *
 * @author oliver.guenther
 */
@Title("Verkaufskanalmanager")
public class SalesChannelManagerView extends javax.swing.JPanel implements Consumer<SalesChannelManagerData>, ResultProducer<List<SalesChannelLine>> {

    private SalesChannelTableModel model;

    private boolean isCanceled = true;

    /** Creates new form SalesChannelManagerView */
    public SalesChannelManagerView() {
        initComponents();
        salesChanelTable.setAutoCreateColumnsFromModel(true);
        salesChanelTable.setAutoCreateRowSorter(true);
        salesChanelTable.setDefaultRenderer(Stock.class, new StockTableCellRenderer());
        salesChanelTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        salesChanelTable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        autoSelectChannelButton = new javax.swing.JButton();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        salesChanelTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(salesChanelTable);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        autoSelectChannelButton.setText("Verkaufskanal automatisch aus Lager w√§hlen");
        autoSelectChannelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoSelectChannelButtonActionPerformed(evt);
            }
        });
        jPanel1.add(autoSelectChannelButton);

        okButton.setText("Ok");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });
        jPanel1.add(okButton);

        cancelButton.setText("Abbrechen");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        jPanel1.add(cancelButton);

        add(jPanel1, java.awt.BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        isCanceled = true;
        Ui.closeWindowOf(this);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        isCanceled = false;
        Ui.closeWindowOf(this);
    }//GEN-LAST:event_okButtonActionPerformed

    private void autoSelectChannelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoSelectChannelButtonActionPerformed
        model.autoSelectChannel();
    }//GEN-LAST:event_autoSelectChannelButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton autoSelectChannelButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton okButton;
    private javax.swing.JTable salesChanelTable;
    // End of variables declaration//GEN-END:variables

    @Override
    public void accept(SalesChannelManagerData data) {
        // Todo (OG): Too lazy to change the datamodel. All Primary Channles point to Stock 0.
        Stock primary = data.stocks.stream().filter(s -> s.getId() == 0).findAny().get();
        // Was: data.stocks.stream().collect(Collectors.toMap(Stock::getPrimaryChannel, s -> s))        
        this.model = new SalesChannelTableModel(data.lines,Map.of(SalesChannel.CUSTOMER, primary, SalesChannel.RETAILER, primary));
        salesChanelTable.setDefaultEditor(Stock.class, new StockTableEditor(data.stocks.toArray()));
        salesChanelTable.setModel(model);
        for (int i = 0; i < model.getColumnCount(); i++) {
            salesChanelTable.getColumnModel().getColumn(i).setPreferredWidth(model.getPreferredWidth(i));
        }
    }

    @Override
    public List<SalesChannelLine> getResult() {
        if ( isCanceled ) return null;
        return model
                .getDataModel()
                .stream()
                .filter(l -> l.hasChanged() || l.getDestination() != null)
                .collect(Collectors.toList());
    }
}
