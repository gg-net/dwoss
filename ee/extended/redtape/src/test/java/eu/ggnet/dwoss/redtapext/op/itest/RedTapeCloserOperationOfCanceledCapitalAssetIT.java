package eu.ggnet.dwoss.redtapext.op.itest;

import eu.ggnet.dwoss.core.common.values.PositionType;
import eu.ggnet.dwoss.mandator.api.value.SpecialSystemCustomers;
import eu.ggnet.dwoss.core.common.values.DocumentType;
import eu.ggnet.dwoss.uniqueunit.ee.entity.UniqueUnit;

import java.util.*;

import javax.ejb.EJB;
import javax.inject.Inject;

import org.jboss.arquillian.junit.Arquillian;
import org.junit.*;
import org.junit.runner.RunWith;

import eu.ggnet.dwoss.receipt.ee.gen.ReceiptGeneratorOperation;
import eu.ggnet.dwoss.redtape.ee.RedTapeAgent;
import eu.ggnet.dwoss.redtape.ee.entity.*;
import eu.ggnet.dwoss.redtapext.ee.RedTapeWorker;
import eu.ggnet.dwoss.redtapext.op.itest.support.*;
import eu.ggnet.dwoss.report.ee.ReportAgent;
import eu.ggnet.dwoss.report.ee.entity.ReportLine;
import eu.ggnet.dwoss.uniqueunit.ee.eao.ProductEao;
import eu.ggnet.dwoss.uniqueunit.ee.format.UniqueUnitFormater;
import eu.ggnet.dwoss.core.common.UserInfoException;

import static eu.ggnet.dwoss.core.common.values.DocumentType.CAPITAL_ASSET;
import static org.assertj.core.api.Assertions.assertThat;

import eu.ggnet.dwoss.redtapext.ee.reporting.RedTapeCloserManual;

/**
 *
 * @author oliver.guenther
 */
@RunWith(Arquillian.class)
public class RedTapeCloserOperationOfCanceledCapitalAssetIT extends ArquillianProjectArchive {

    @Inject
    private ReceiptGeneratorOperation receiptGenerator;

    @EJB
    private RedTapeCloserManual redTapeCloser;

    @EJB
    private ReportAgent reportAgent;

    @EJB
    private RedTapeWorker redTapeWorker;

    @EJB
    private RedTapeAgent redTapeAgent;

    @Inject
    private ProductEao eao;

    @Inject  // See sample mandator services
    private SpecialSystemCustomers systemCustomers;

    @Test
    public void canceledCapitalAsset() throws UserInfoException {
        UniqueUnit uu = receiptGenerator.makeUniqueUnits(1, true, true).get(0);

        assertThat(systemCustomers.getSpecialCustomers()).as("At least one Special Customer expected").isNotEmpty();
        Optional<Long> possibleCapitalAssetCustomerId = systemCustomers.getSpecialCustomers().entrySet().stream()
                .filter(e -> e.getValue() == CAPITAL_ASSET).map(e -> e.getKey()).findFirst();
        assertThat(possibleCapitalAssetCustomerId.isPresent()).as("Captial Asset Customer Id exists").isTrue();

        assertThat(uu).as("One UniqueUnit in Database").isNotNull();

        long scId = possibleCapitalAssetCustomerId.get();

        // Create a dossier on a random customer.
        Dossier dos = redTapeWorker.create(scId, false, "Generated by RedTapeGeneratorOperation.makeSalesDossiers()");
        Document doc = dos.getActiveDocuments(DocumentType.CAPITAL_ASSET).get(0);
        assertThat(doc).overridingErrorMessage("Expected active document Capital Asset, got null. Dossier: " + dos.toMultiLine()).isNotNull();

        Position pos = Position.builder()
                .amount(1)
                .type(PositionType.UNIT)
                .uniqueUnitId(uu.getId())
                .uniqueUnitProductId(uu.getProduct().getId())
                .price(10.0)
                .tax(doc.getSingleTax())
                .description(UniqueUnitFormater.toDetailedDiscriptionLine(uu))
                .name(UniqueUnitFormater.toPositionName(uu))
                .refurbishedId(uu.getRefurbishId())
                .build();
        doc.append(pos);

        doc = redTapeWorker.update(doc, null, "JUnit");
        doc.add(Document.Condition.CANCELED);

        doc = redTapeWorker.update(doc, null, "JUnit");

        redTapeCloser.executeManual("Junit");
        // Now the document should be closed, but nothing should be reportet.

        doc = redTapeAgent.findByIdEager(Document.class, doc.getId());
        assertThat(doc.isClosed()).as("Document.closed").isTrue();

        List<ReportLine> reportLines = reportAgent.findAllEager(ReportLine.class);
        assertThat(reportLines).as("ReportLines").isEmpty();
    }

}
